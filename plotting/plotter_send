#!/usr/bin/env python3

import serial, argparse, sys, subprocess
from itertools import chain
from functools import reduce
from PIL import Image
import curtsies
import hpgl
import os

def prompt_input():
    with curtsies.Input() as input:
        for kp in input:
            if kp in ('y', 'n'):
                return kp
            else:
                print("What?")

def max_image_size(images):
    maxX = 0
    maxY = 0
    for i in images:
        maxX = max(maxX, i.size[0])
        maxY = max(maxY, i.size[1])
    return (maxX, maxY)

def paste_up(img, newsize):
    retval = Image.new('RGBA', newsize)
    w, h = newsize
    ow, oh = img.size
    x = w - ow
    y = h - oh
    retval.paste(img, (0, y))
    return retval

def composite_all(images):
    maxsize = max_image_size(images)
    composited = reduce(Image.alpha_composite, map(lambda i: paste_up(i, maxsize), images))
    retval = Image.new('RGB', maxsize, color=(255, 255, 255))
    retval.paste(composited, (0, 0, *maxsize))
    return retval

plotter_settings = {
    "titan3" : {
        "baudrate": 38400,
        "bytesize": serial.EIGHTBITS,
        "xonxoff": True,
        "stopbits":serial.STOPBITS_ONE
    },
    'direct' : {}
}

arg_parser = argparse.ArgumentParser(description="Send an HPGL file to a plotter.")
arg_parser.add_argument('--plotter', default='direct', choices=sorted(plotter_settings.keys()), type=str, help="choose plotter serial port settings. Select 'direct' to work with a non-UART interface.")
arg_parser.add_argument('--dry-run', default=False, const=True, action='store_const', help="Print output to stdout instead the selected port.")
arg_parser.add_argument('--preview', default=False, const=True, action='store_const', help="Render preview(s) of the plot.")
#arg_parser.add_argument('--mirror', default=False, const=True, action='store_const', help="Mirror the plot by flipping on the Y axis. Currently not implemented.")
arg_parser.add_argument('--draw', '-d', type=int, metavar='COUNT', default=0, const=1, nargs='?', help="How many times to send the drawing (pen) pass.")
arg_parser.add_argument('--cut', '-c', type=int, metavar='COUNT', default=0, const=1, nargs='?', help="How many times to send the cutting (knife) pass.")
arg_parser.add_argument('--port', '-p', metavar='PATH', required=True, type=str, help="The device-file the plotter is connected to.")
arg_parser.add_argument('file', type=str, help="The *preprocessed* file of HPGL commands to send.")
args = arg_parser.parse_args()

chosen_plotter_settings = plotter_settings[args.plotter]

# Load and transform plot
plot = hpgl.parse_file(args.file)

# if args.mirror: 
#     plot.mirror() # Commented out because this uses SC to achieve mirror, and that's ignored by my plotter


# Find passes and preview
passes = plot.find_passes()
passes['knife'].sort(key=hpgl.Block.geometric_sort_key)
passes['pen'].sort(key=hpgl.Block.geometric_sort_key)

if args.preview:
    images = []

    images.append(hpgl.image_preview(passes['init'] + passes['knife']))
    images.append(hpgl.image_preview(passes['init'] + passes['pen'] + passes['labels']))

    composited = composite_all(images)
    composited.show()

    print("Do those look good? (y/n)")
    if prompt_input() == 'n':
        exit(0)


if not (args.draw or args.cut):
    print("Neither --cut nor --draw specified. Exiting.")
    exit(0)

# Do pattern repetitions
def repeat_pass(pass_name, count):
    repeated = []
    for b in passes[pass_name]:
        if b.linestring().is_closed:
            b.repeat_continuous_trace(count)
            repeated.append(b)
        else:
            for i in range(count):
                repeated.append(b)
    passes[pass_name] = repeated

if args.draw > 1:
    repeat_pass('pen', args.draw)

if args.cut > 1:
    repeat_pass('knife', args.cut)


# Open output
out_port = None

if args.dry_run:
    out_port = os.fdopen(sys.stdout.fileno(), 'wb')
elif args.plotter == 'direct':
    out_port = open(args.port, 'wb')
else:
    out_port = serial.Serial(port=args.port, **chosen_plotter_settings)


# Plot passes
def write_pass(p):
    output_string = "".join([str(b) for b in p])
    out_port.write(output_string.encode('ASCII'))
    out_port.flush()

#write_pass(passes['init']) # this apparently does nothing anyway since the plotter doesn't honor SC.

if args.draw:
    write_pass(passes['pen'])
    write_pass(passes['labels'])

if args.draw and args.cut:
    while True:
        response = input("Have you inserted the knife? (type 'yes' and hit ENTER) ")
        if response == 'yes':
            break

if args.cut:
    write_pass(passes['knife'])