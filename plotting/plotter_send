#!/usr/bin/env python3

import serial, argparse, sys, subprocess
from itertools import chain
import curtsies
import hpgl

plotter_settings = {
    "titan" : {
        "baudrate": 38400,
        "xonxoff": True,
        "stopbits":serial.STOPBITS_ONE
    }
}

arg_parser = argparse.ArgumentParser(description="Send an HPGL file to a plotter.")
arg_parser.add_argument('--plotter', default='titan', choices=sorted(plotter_settings.keys()), type=str, help="choose plotter settings.")
arg_parser.add_argument('--dry-run', default=False, const=True, action='store_const', help="Print output to stdout instead of a serial port.")
arg_parser.add_argument('--preview', default=False, const=True, action='store_const', help="Render preview(s) of the plot.")
arg_parser.add_argument('--mirror', default=False, const=True, action='store_const', help="Mirror the plot by flipping on the Y axis.")
arg_parser.add_argument('--separate', default=False, const=True, action='store_const', help="Attempts to separate pen from knife lines.")
arg_parser.add_argument('--repeat', type=int, help="Repeat the pattern REPEAT times.")
arg_parser.add_argument('port', type=str, help="The serial port the plotter is connected to.")
arg_parser.add_argument('file', type=str, help="The file of HPGL commands to send.")
args = arg_parser.parse_args()

chosen_plotter_settings = plotter_settings[args.plotter]

# Load and transform plot
plot = hpgl.parse_file(args.file)

if args.mirror:
    plot.mirror()


# Render passes
passes = plot.find_passes()
work_passes = {}

for w in passes['work']:
    work_passes[w] = hpgl.flatten_blocks_to_text(chain(passes['init'], passes['work'][w]))

# Preview passes

def prompt_input():
    with curtsies.Input() as input:
        for kp in input:
            if kp in ('y', 'n'):
                return kp
            else:
                print("What?")

if args.preview:
    filenames = ['preview-raw.png']
    hpgl.render_preview(plot.linear(), 'preview-raw.png')

    for p in passes['work'].keys():
        filename = f"preview-{p}.png"
        filenames.append(filename)
        hpgl.render_preview(work_passes[p], filename)

    subprocess.run(['gthumb'] + filenames)
    print("Do those look good? (y/n)")
    if prompt_input() == 'n':
        exit(1)

# Open output
out_port = sys.stdout if args.dry_run else serial.Serial(port=args.port, **chosen_plotter_settings)

# Plot passes
out_port.write(str(plot))
