#!/usr/bin/env python3

import serial, argparse, sys, subprocess
from itertools import chain
from functools import reduce
from PIL import Image
import curtsies
import hpgl

def prompt_input():
    with curtsies.Input() as input:
        for kp in input:
            if kp in ('y', 'n'):
                return kp
            else:
                print("What?")

def max_image_size(images):
    maxX = 0
    maxY = 0
    for i in images:
        maxX = max(maxX, i.size[0])
        maxY = max(maxY, i.size[1])
    return (maxX, maxY)

def paste_up(img, newsize):
    retval = Image.new('RGBA', newsize)
    w, h = newsize
    ow, oh = img.size
    x = w - ow
    y = h - oh
    retval.paste(img, (0, y))
    return retval

def composite_all(images):
    maxsize = max_image_size(images)
    composited = reduce(Image.alpha_composite, map(lambda i: paste_up(i, maxsize), images))
    retval = Image.new('RGB', maxsize, color=(255, 255, 255))
    retval.paste(composited, (0, 0, *maxsize))
    return retval



plotter_settings = {
    "titan" : {
        "baudrate": 38400,
        "xonxoff": True,
        "stopbits":serial.STOPBITS_ONE
    }
}

arg_parser = argparse.ArgumentParser(description="Send an HPGL file to a plotter.")
arg_parser.add_argument('--plotter', default='titan', choices=sorted(plotter_settings.keys()), type=str, help="choose plotter settings.")
arg_parser.add_argument('--dry-run', default=False, const=True, action='store_const', help="Print output to stdout instead of a serial port.")
arg_parser.add_argument('--preview', default=False, const=True, action='store_const', help="Render preview(s) of the plot.")
arg_parser.add_argument('--mirror', default=False, const=True, action='store_const', help="Mirror the plot by flipping on the Y axis.")
arg_parser.add_argument('--separate', default=False, const=True, action='store_const', help="Attempts to separate pen from knife lines.")
arg_parser.add_argument('--repeat', type=int, help="Repeat the pattern REPEAT times.")
arg_parser.add_argument('port', type=str, help="The serial port the plotter is connected to.")
arg_parser.add_argument('file', type=str, help="The file of HPGL commands to send.")
args = arg_parser.parse_args()

chosen_plotter_settings = plotter_settings[args.plotter]

# Load and transform plot
plot = hpgl.parse_file(args.file)

if args.mirror:
    plot.mirror()


# Render passes
passes = plot.find_passes()
work_passes = {}

for w in passes['work']:
    work_passes[w] = hpgl.flatten_blocks_to_text(chain(passes['init'], passes['work'][w]))

# Preview passes


if args.preview:
    
    images = []

    images.append(hpgl.image_preview(work_passes['knife'], (255, 0, 0)))
    if 'pen' in work_passes:
        images.append(hpgl.image_preview(work_passes['pen'], (0, 0, 255)))

    composited = composite_all(images)
    composited.show()

    print("Do those look good? (y/n)")
    if prompt_input() == 'n':
        exit(1)

# Open output
out_port = sys.stdout if args.dry_run else serial.Serial(port=args.port, **chosen_plotter_settings)

# Plot passes
out_port.write(str(plot))
